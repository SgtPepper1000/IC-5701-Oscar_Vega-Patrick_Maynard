/* The following code was generated by JFlex 1.4.3 on 4/8/13 12:36 PM */

import java_cup.runtime.*;
import java_cup.sym;
import java_cup.symbol;
import java.io.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 4/8/13 12:36 PM from the specification file
 * <tt>lexer.flex</tt>
 */
public class scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMENTARIO = 2;
  public static final int TAG = 4;
  public static final int ATRIBUTO = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  1,  1,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\2\1\3\2\0\1\2\22\0\1\2\1\5\4\0\1\61"+
    "\6\0\1\6\1\0\1\60\1\0\6\45\3\0\2\0\1\4\1\0"+
    "\1\7\1\57\1\0\1\54\1\0\1\12\1\10\1\16\1\0\2\0"+
    "\1\50\1\0\1\52\1\47\1\53\1\51\1\11\1\15\3\0\1\13"+
    "\4\0\1\14\1\0\6\0\1\17\1\27\1\35\1\20\1\22\1\30"+
    "\1\34\1\44\1\33\1\1\1\36\1\25\1\43\1\32\1\31\1\24"+
    "\1\37\1\21\1\23\1\26\1\40\1\42\1\55\1\46\1\41\1\56"+
    "\u0f85\0\1\0\uefff\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\1\1\3\1\4\4\1\1\4"+
    "\2\1\1\4\21\1\1\5\1\6\1\7\1\10\11\0"+
    "\1\4\25\0\1\4\20\0\1\11\23\0\1\4\7\0"+
    "\1\12\1\13\53\0\1\11\64\0\1\11\13\0\1\11"+
    "\4\0\1\11\1\4\14\0\1\4\3\0\1\11\7\0"+
    "\1\11\1\4\40\0\1\11\4\0\1\11\13\0\1\4"+
    "\11\0\1\11\24\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[335];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\144\0\372\0\u012c"+
    "\0\u015e\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a\0\u02bc"+
    "\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a\0\u044c"+
    "\0\u047e\0\u04b0\0\u04e2\0\u0514\0\u0546\0\u0578\0\u05aa\0\u05dc"+
    "\0\144\0\u060e\0\144\0\144\0\u0640\0\u0672\0\u06a4\0\u06d6"+
    "\0\u0708\0\u073a\0\u076c\0\u079e\0\u07d0\0\144\0\u0802\0\u0834"+
    "\0\u0866\0\u0898\0\u08ca\0\u08fc\0\u092e\0\u04e2\0\u0960\0\u0992"+
    "\0\u09c4\0\u09f6\0\u0a28\0\u0a5a\0\u0a8c\0\u0abe\0\u0af0\0\u0b22"+
    "\0\u0b54\0\u0b86\0\u0bb8\0\u0bea\0\u0c1c\0\u0c4e\0\u0c80\0\u0cb2"+
    "\0\u0ce4\0\u0d16\0\u0d48\0\u0d7a\0\u0dac\0\u0dde\0\u0e10\0\u0e42"+
    "\0\u0e74\0\u0ea6\0\u0ed8\0\u0f0a\0\144\0\u0f3c\0\u0f6e\0\u0fa0"+
    "\0\u0fd2\0\u1004\0\u1036\0\u1068\0\u109a\0\u10cc\0\u10fe\0\u1130"+
    "\0\u1162\0\u1194\0\u11c6\0\u11f8\0\u122a\0\u125c\0\u128e\0\u12c0"+
    "\0\u12f2\0\u1324\0\u1356\0\u1388\0\u13ba\0\u13ec\0\u141e\0\u1450"+
    "\0\144\0\u05dc\0\u1482\0\u14b4\0\u14e6\0\u1518\0\u154a\0\u157c"+
    "\0\u15ae\0\u15e0\0\u1612\0\u1644\0\u1676\0\u16a8\0\u16da\0\u170c"+
    "\0\u173e\0\u1770\0\u17a2\0\u17d4\0\u1806\0\u1838\0\u186a\0\u189c"+
    "\0\u18ce\0\u1900\0\u1932\0\u1964\0\u1996\0\u19c8\0\u19fa\0\u1a2c"+
    "\0\u1a5e\0\u1a90\0\u1ac2\0\u1af4\0\u1b26\0\u1b58\0\u1b8a\0\u1bbc"+
    "\0\u1bee\0\u1c20\0\u1c52\0\u1c84\0\u1cb6\0\u1ce8\0\u1d1a\0\u1d4c"+
    "\0\u1d7e\0\u1db0\0\u1de2\0\u1e14\0\u1e46\0\u1e78\0\u1eaa\0\u1edc"+
    "\0\u1f0e\0\u1f40\0\u1f72\0\u1fa4\0\u1fd6\0\u2008\0\u203a\0\u206c"+
    "\0\u209e\0\u20d0\0\u2102\0\u2134\0\u2166\0\u2198\0\u21ca\0\u21fc"+
    "\0\u222e\0\u2260\0\u2292\0\u22c4\0\u22f6\0\u2328\0\u235a\0\u238c"+
    "\0\u23be\0\u23f0\0\u2422\0\u2454\0\u2486\0\u24b8\0\u24ea\0\u251c"+
    "\0\u254e\0\u2580\0\u25b2\0\u25e4\0\u2616\0\u2648\0\u267a\0\u26ac"+
    "\0\u26de\0\u2710\0\u2742\0\u2774\0\u27a6\0\u27d8\0\u280a\0\u283c"+
    "\0\u286e\0\u28a0\0\u28d2\0\u1ce8\0\u2904\0\u2936\0\u2968\0\u299a"+
    "\0\u29cc\0\u29fe\0\u2a30\0\u2a62\0\u2a94\0\u2ac6\0\u2af8\0\u2b2a"+
    "\0\u2b5c\0\u2b8e\0\u2bc0\0\u2bf2\0\u2c24\0\u2c56\0\u2c88\0\u2cba"+
    "\0\u2cec\0\u2d1e\0\u2d50\0\u2d82\0\u2db4\0\u2de6\0\u2e18\0\u2e4a"+
    "\0\u2e7c\0\u2eae\0\u2ee0\0\u2f12\0\u2f44\0\u2f76\0\u2fa8\0\u2fda"+
    "\0\u300c\0\u303e\0\u3070\0\u30a2\0\u30d4\0\u3106\0\u3138\0\u316a"+
    "\0\u319c\0\u31ce\0\u3200\0\u3232\0\u3264\0\u3296\0\u32c8\0\u32fa"+
    "\0\u332c\0\u335e\0\u3390\0\u33c2\0\u33f4\0\u3426\0\u3458\0\u348a"+
    "\0\u34bc\0\u34ee\0\u3520\0\u3552\0\u3584\0\u35b6\0\u35e8\0\u361a"+
    "\0\u364c\0\u367e\0\u36b0\0\u36e2\0\u1806\0\u3714\0\u3746\0\u3778"+
    "\0\u37aa\0\u37dc\0\u380e\0\u3840\0\u3872\0\u38a4\0\u38d6\0\u3908"+
    "\0\u36e2\0\u393a\0\u396c\0\u399e\0\u39d0\0\u3a02\0\u3a34\0\u3a66"+
    "\0\u3a98\0\u3aca\0\u0dac\0\u3afc\0\u3b2e\0\u3b60\0\u3b92\0\u3bc4"+
    "\0\u3bf6\0\u3c28\0\u3c5a\0\u3c8c\0\u3cbe\0\u3cf0\0\u3d22\0\u3d54"+
    "\0\u3d86\0\u3db8\0\u3dea\0\u3e1c\0\u3e4e\0\u3e80\0\u3eb2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[335];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\4\3\1\4\1\5\1\3\1\6\7\3\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\3\1\27"+
    "\1\3\1\30\1\31\1\32\1\3\1\33\1\34\3\3"+
    "\1\35\1\3\1\36\2\3\1\37\1\40\62\41\67\0"+
    "\1\42\51\0\1\43\1\44\11\0\1\45\71\0\1\46"+
    "\1\47\2\0\1\50\1\51\1\0\1\52\5\0\1\53"+
    "\10\0\1\54\32\0\1\55\1\56\1\0\1\57\2\0"+
    "\2\56\1\0\1\60\2\0\1\61\50\0\1\62\6\0"+
    "\1\63\6\0\1\64\53\0\1\65\46\0\1\66\1\0"+
    "\1\67\1\70\1\0\1\71\1\0\1\72\4\0\1\73"+
    "\1\0\1\74\2\0\1\75\2\0\1\76\1\77\34\0"+
    "\1\100\1\0\1\101\57\0\1\102\11\0\1\103\1\0"+
    "\1\104\45\0\1\105\2\56\1\106\3\0\1\56\4\0"+
    "\1\107\5\0\1\110\2\0\1\56\34\0\1\111\1\0"+
    "\1\56\3\0\1\112\3\0\1\113\1\0\1\114\1\115"+
    "\44\0\1\116\1\0\1\117\7\0\1\120\54\0\1\121"+
    "\1\56\1\0\1\122\51\0\1\123\11\0\1\124\50\0"+
    "\1\125\2\0\1\126\6\0\1\127\10\0\1\114\56\0"+
    "\1\130\40\0\1\131\2\0\1\132\2\0\1\133\3\0"+
    "\1\134\1\0\1\135\10\0\1\136\44\0\1\137\53\0"+
    "\1\140\1\0\1\141\1\0\1\56\53\0\1\142\2\0"+
    "\1\143\1\144\1\0\1\145\53\0\1\146\2\0\1\147"+
    "\15\0\1\150\42\0\1\151\1\152\1\144\2\0\1\153"+
    "\16\0\1\56\57\0\1\154\66\0\1\155\27\0\1\156"+
    "\64\0\1\157\11\0\1\160\35\0\1\161\54\0\2\162"+
    "\64\0\1\163\64\0\1\164\70\0\1\165\63\0\1\166"+
    "\12\0\1\167\50\0\1\170\63\0\1\125\4\0\1\171"+
    "\55\0\1\172\60\0\1\173\6\0\1\174\57\0\1\175"+
    "\54\0\1\176\63\0\1\177\4\0\1\200\56\0\1\56"+
    "\50\0\1\56\1\0\1\201\16\0\1\56\36\0\1\202"+
    "\5\0\1\125\14\0\1\125\74\0\1\203\31\0\1\204"+
    "\71\0\1\205\61\0\1\125\51\0\1\206\53\0\1\60"+
    "\61\0\1\207\1\0\1\210\17\0\1\211\76\0\1\212"+
    "\24\0\1\213\7\0\1\110\12\0\1\214\41\0\1\56"+
    "\2\0\1\56\13\0\1\215\35\0\1\216\61\0\1\110"+
    "\63\0\1\217\62\0\1\56\6\0\1\220\62\0\1\221"+
    "\61\0\1\222\22\0\1\223\36\0\1\224\50\0\1\225"+
    "\5\0\1\226\100\0\1\227\41\0\1\211\57\0\1\212"+
    "\60\0\1\230\11\0\1\231\55\0\1\232\50\0\1\233"+
    "\1\234\74\0\1\56\62\0\1\235\61\0\1\212\43\0"+
    "\1\123\63\0\1\236\10\0\1\237\55\0\1\240\34\0"+
    "\1\241\123\0\1\212\41\0\1\242\20\0\1\243\10\0"+
    "\1\244\37\0\1\245\7\0\1\157\42\0\1\246\63\0"+
    "\1\247\57\0\1\121\62\0\1\250\4\0\1\251\46\0"+
    "\1\252\2\0\1\253\57\0\1\254\4\0\1\255\3\0"+
    "\1\256\1\257\10\0\1\260\44\0\1\261\52\0\1\262"+
    "\2\0\1\263\57\0\1\56\66\0\1\125\56\0\1\264"+
    "\60\0\1\56\3\0\1\265\55\0\1\266\64\0\1\267"+
    "\70\0\1\270\47\0\1\271\2\0\1\56\21\0\1\272"+
    "\41\0\1\273\3\0\1\274\54\0\1\275\56\0\1\276"+
    "\56\0\1\277\13\0\1\300\71\0\1\301\42\0\1\56"+
    "\106\0\1\302\23\0\1\303\65\0\1\304\62\0\1\305"+
    "\47\0\1\306\65\0\1\307\70\0\1\310\57\0\1\56"+
    "\106\0\1\311\42\0\1\312\66\0\1\313\1\0\1\314"+
    "\46\0\1\125\73\0\1\315\50\0\1\316\62\0\1\125"+
    "\55\0\1\125\2\0\1\317\61\0\1\172\64\0\1\320"+
    "\53\0\1\321\62\0\1\322\64\0\1\323\60\0\1\175"+
    "\65\0\1\324\55\0\1\325\60\0\1\326\10\0\1\327"+
    "\62\0\1\330\53\0\1\261\56\0\1\125\70\0\1\331"+
    "\1\0\1\332\50\0\1\123\102\0\1\333\43\0\1\301"+
    "\53\0\1\334\72\0\1\335\12\0\1\336\52\0\1\337"+
    "\61\0\1\340\50\0\1\341\74\0\1\56\57\0\1\342"+
    "\52\0\1\261\5\0\1\343\54\0\1\344\55\0\1\345"+
    "\75\0\1\346\60\0\1\347\65\0\1\56\40\0\1\350"+
    "\72\0\1\351\73\0\1\56\44\0\1\56\66\0\1\352"+
    "\50\0\1\353\74\0\1\354\45\0\1\355\61\0\1\157"+
    "\72\0\1\356\67\0\1\237\47\0\1\177\60\0\1\357"+
    "\62\0\1\360\56\0\1\361\55\0\1\172\64\0\1\362"+
    "\62\0\1\323\5\0\1\172\51\0\1\363\66\0\1\364"+
    "\57\0\1\365\57\0\1\56\60\0\1\366\75\0\1\367"+
    "\67\0\1\157\51\0\1\370\4\0\1\371\44\0\1\173"+
    "\55\0\1\116\74\0\1\313\63\0\1\372\52\0\1\373"+
    "\53\0\1\56\24\0\1\374\55\0\1\56\47\0\1\375"+
    "\63\0\1\376\51\0\1\377\75\0\1\u0100\52\0\1\56"+
    "\106\0\1\56\63\0\1\56\31\0\1\125\63\0\1\u0101"+
    "\33\0\3\u0102\1\0\56\u0102\13\0\1\u0103\70\0\1\u0104"+
    "\72\0\1\u0105\50\0\1\237\75\0\1\125\55\0\1\125"+
    "\60\0\1\314\53\0\1\u0106\1\326\63\0\1\u0107\52\0"+
    "\1\u0108\71\0\1\u0109\63\0\1\u010a\54\0\1\u010b\76\0"+
    "\1\110\55\0\1\u010c\52\0\1\125\53\0\1\u010d\77\0"+
    "\1\261\50\0\1\u010e\60\0\1\237\54\0\1\u010f\75\0"+
    "\1\u0110\52\0\1\326\75\0\1\u0111\41\0\1\u0112\62\0"+
    "\1\67\62\0\1\326\71\0\1\u0113\46\0\1\u0114\72\0"+
    "\1\u0115\65\0\1\u0116\63\0\1\u0117\45\0\1\u0118\64\0"+
    "\1\u0119\65\0\1\60\65\0\1\326\45\0\1\u011a\62\0"+
    "\1\u011b\57\0\1\u011c\64\0\1\u011d\1\u011e\57\0\1\u011f"+
    "\62\0\1\u0120\64\0\1\324\1\u0121\52\0\1\175\63\0"+
    "\1\u0122\56\0\1\353\65\0\1\342\5\0\1\u0123\66\0"+
    "\1\u0124\57\0\1\314\47\0\1\u0125\72\0\1\u0126\50\0"+
    "\1\u0127\70\0\1\u0128\63\0\1\u0129\53\0\1\u012a\56\0"+
    "\1\u012b\103\0\1\326\61\0\1\125\23\0\1\u012c\67\0"+
    "\1\u012d\70\0\1\u012e\100\0\1\212\42\0\1\u012f\71\0"+
    "\1\123\47\0\1\212\65\0\1\u0124\66\0\1\u0130\46\0"+
    "\1\314\70\0\1\u0131\62\0\1\u0132\57\0\1\u0133\55\0"+
    "\1\u0132\65\0\1\212\53\0\1\u0134\64\0\1\u0135\57\0"+
    "\1\u0136\62\0\1\u0137\71\0\1\u0138\51\0\1\u0139\77\0"+
    "\1\u013a\43\0\1\u013b\71\0\1\172\63\0\1\332\56\0"+
    "\1\125\53\0\1\u013c\63\0\1\u013d\54\0\1\u013e\63\0"+
    "\1\56\73\0\1\u0128\45\0\1\u013f\74\0\1\326\57\0"+
    "\1\u011b\53\0\1\u0128\71\0\1\u0140\61\0\1\u0141\47\0"+
    "\1\125\65\0\1\u0110\54\0\1\u0142\63\0\1\175\46\0"+
    "\1\u0143\70\0\1\u0144\67\0\1\56\74\0\1\u0145\50\0"+
    "\1\u0132\75\0\1\125\53\0\1\u0142\62\0\1\212\50\0"+
    "\1\67\60\0\1\u0146\61\0\1\166\71\0\1\237\60\0"+
    "\1\u0147\70\0\1\u0148\67\0\1\56\32\0\1\u0149\62\0"+
    "\1\u014a\64\0\1\212\102\0\1\u014b\10\0\1\u014c\40\0"+
    "\1\305\57\0\1\u014d\36\0\1\3\70\0\1\56\65\0"+
    "\1\u0132\105\0\1\125\53\0\1\u014e\52\0\1\135\65\0"+
    "\1\u0133\44\0\1\u0133\63\0\1\u014f\72\0\1\160\62\0"+
    "\1\125\57\0\1\u0128\62\0\1\300\26\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16100];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\2\1\1\11\32\1\1\11\1\1\2\11"+
    "\11\0\1\11\25\0\1\1\20\0\1\11\23\0\1\1"+
    "\7\0\1\11\1\1\53\0\1\1\64\0\1\1\13\0"+
    "\1\1\4\0\2\1\14\0\1\1\3\0\1\1\7\0"+
    "\2\1\40\0\1\1\4\0\1\1\13\0\1\1\11\0"+
    "\1\1\24\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[335];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  StringBuffer string = new StringBuffer();

  private Symbol symbol(int type) {
    return new Symbol(type, yyline, yycolumn);
  }
  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline, yycolumn, value);
  }
  
  private static final int _TAG  =  1;
  private static final int _ATRIBUTO  =  2;
  private static final int TAG_EXC=  3;
  private static final int TAG_INTE=  4;
  private static final int TAG_SLA =  5;
  private static final int TAG_SIM =  6;
  private static final int CERRAR_SLA =  7;
  private static final int CERRAR_SIM =  8;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 146) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 9: 
          { System.out.println(yytext());
									return symbol(_ATRIBUTO);
          }
        case 12: break;
        case 10: 
          { System.out.println(yytext());
									return symbol(CERRAR_SLA);
          }
        case 13: break;
        case 8: 
          { System.out.println(yytext());
									return symbol(TAG_SLA);
          }
        case 14: break;
        case 5: 
          { System.out.print(yytext());
          }
        case 15: break;
        case 4: 
          { System.out.println(yytext());
									return symbol(_TAG);
          }
        case 16: break;
        case 3: 
          { System.out.println(yytext());
									return symbol(CERRAR_SIM);
          }
        case 17: break;
        case 2: 
          { System.out.println(yytext());
									return symbol(TAG_SIM);
          }
        case 18: break;
        case 7: 
          { System.out.println(yytext());
									return symbol(TAG_INTE);
          }
        case 19: break;
        case 11: 
          { FileOutputStream f = new FileOutputStream("errores.log");
									System.setErr(new PrintStream(f));
								 	System.err.println("Line: "+yyline + " Error lexico: El uso del caracter \"&\" por si solo es invalido; use &amp");
								 	System.out.println("Line: "+yyline + " Error lexico: El uso del caracter \"&\" por si solo es invalido; use &amp");
									throw new Error("Error lexico: El uso del caracter \"&\" por si solo es invalido; use &amp");
          }
        case 20: break;
        case 6: 
          { System.out.println(yytext());
									return symbol(TAG_EXC);
          }
        case 21: break;
        case 1: 
          { 
          }
        case 22: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(0);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java scanner <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        scanner scanner = null;
        try {
          scanner = new scanner( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
